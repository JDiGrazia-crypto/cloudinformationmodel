CREATE SCHEMA IF NOT EXISTS SHIPMENT_ENTITY_GROUP;

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_TAX (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_STATUS (
  ID VARCHAR(36) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_PRICE_ADJUSTMENT (
  ADJUSTMENT_AMOUNT INTEGER NOT NULL,
  SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_AMOUNT INTEGER,
  DESCRIPTION VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  ADJUSTMENT_TAX_AMOUNT INTEGER,
  PRIMARY KEY (ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT (
  GIFT_MESSAGE_TEXT VARCHAR(500),
  SHIPMENT_NUMBER VARCHAR(500),
  ID VARCHAR(36) UNIQUE NOT NULL,
  IS_GIFT BOOLEAN,
  ACTUAL_DELIVERY_DATE_TIME TIME,
  SPECIAL_INSTRUCTIONS_TEXT VARCHAR(500),
  CARRIER_TRACKING_NUMBER VARCHAR(500),
  ESTIMATED_DELIVERY_DATE_TIME TIME,
  SCHEDULED_DELIVERY_DATE_TIME TIME,
  SHIPMENT_DATE DATE NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PACKAGE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  SHIPMENT_PRODUCT_COUNT INTEGER NOT NULL,
  SHIPMENT_PRODUCT_DESCRIPTION VARCHAR(500) NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_DOCUMENT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPPING_METHOD (
  ID VARCHAR(36) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR(500) NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  SHIPMENT_PRODUCT_COUNT INTEGER NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHI_PRO_PRI_ADJ_TAX_SHI_PRO_PRI_ADJ_JOIN (
  SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_TAX_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_TAX_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_TAX(ID),
  FOREIGN KEY(SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_PRICE_ADJUSTMENT(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_SHIPMENT_PRODUCT_JOIN (
  SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_PRICE_ADJUSTMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_PRICE_ADJUSTMENT(ID),
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_SHIPMENT_STATUS_JOIN (
  SHIPMENT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_STATUS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT(ID),
  FOREIGN KEY(SHIPMENT_STATUS_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_STATUS(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_SALES_ORDER_JOIN (
  SHIPMENT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT(ID),
  FOREIGN KEY(SALES_ORDER_ID) REFERENCES SALES_ORDER_ENTITY_GROUP.SALES_ORDER(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_SHIP_TO_ADDRESS_JOIN (
  SHIPMENT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_ADDRESS_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT(ID),
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ENTITY_GROUP.CONTACT_POINT_ADDRESS(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_SALES_ORDER_DELIVERY_GROUP_JOIN (
  SHIPMENT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_DELIVERY_GROUP_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT(ID),
  FOREIGN KEY(SALES_ORDER_DELIVERY_GROUP_ID) REFERENCES SALES_ORDER_ENTITY_GROUP.SALES_ORDER_DELIVERY_GROUP(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PACKAGE_SHIPMENT_JOIN (
  SHIPMENT_PACKAGE_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PACKAGE_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PACKAGE(ID),
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_DOCUMENT_SHIPMENT_JOIN (
  SHIPMENT_DOCUMENT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_DOCUMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_DOCUMENT(ID),
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPPING_METHOD_PRODUCT_JOIN (
  SHIPPING_METHOD_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPPING_METHOD_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPPING_METHOD(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT_ENTITY_GROUP.PRODUCT(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_PRODUCT_JOIN (
  SHIPMENT_PRODUCT_ID  VARCHAR(36) NOT NULL,
  PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT(ID),
  FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT_ENTITY_GROUP.PRODUCT(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_SHIPMENT_JOIN (
  SHIPMENT_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT(ID),
  FOREIGN KEY(SHIPMENT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_SHIPMENT_PACKAGE_JOIN (
  SHIPMENT_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SHIPMENT_PACKAGE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT(ID),
  FOREIGN KEY(SHIPMENT_PACKAGE_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PACKAGE(ID)
);

CREATE TABLE SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT_SALES_ORDER_PRODUCT_JOIN (
  SHIPMENT_PRODUCT_ID  VARCHAR(36) NOT NULL,
  SALES_ORDER_PRODUCT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(SHIPMENT_PRODUCT_ID) REFERENCES SHIPMENT_ENTITY_GROUP.SHIPMENT_PRODUCT(ID),
  FOREIGN KEY(SALES_ORDER_PRODUCT_ID) REFERENCES SALES_ORDER_ENTITY_GROUP.SALES_ORDER_PRODUCT(ID)
);